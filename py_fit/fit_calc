#!/usr/bin/python3

import re
import numpy
import subprocess
import scipy.optimize
import matplotlib.pyplot as plt


# An example of fitting experimental data with cryoblocks calculation.
# I plan to convert it to a general tool or python library.
#
# At the moment some information is stored in comments of cryoblocks
# command file:
#  - free parameter names, their limits and initial values
#  - data columns which should be extracted from calculation
#
# Function cryoblocks_read(file) reads information from the file into
# a single structure.
#
# Function cryoblocks_run takes this structure and new parameter values,
# runs cryoblock program and reads its output.
#

num_re = '[\+\-0-9\.eE]*[0-9\.]'  # floating-point value
############################################################
# Read cryoblocks command file,
# parse special comments:
#  `#FIT <min>:<max>` after varianle definition to use the variable in the fit
#  `#FIT_COLS <x>:<y>` to set otput columns for the fit
# Return dictionary with all collected information

def cryoblocks_read(cmdfile):
  cmd = ''
  names = []
  units = []
  vals  = []
  mins  = []
  maxs  = []
  cols  = (0,1)
  with open(cmdfile) as f:
    while True:
      # read line by line
      l = f.readline()
      if not l: break

      # find parameters for fit
      res = re.match('^\s*define\s+(\S+)\s+('+num_re+')(\S*)\s+#FIT\s*('+num_re+'):('+num_re+')', l)
      if res:
        names.append(res.group(1))
        vals.append(float(res.group(2)))
        units.append(res.group(3))
        mins.append(float(res.group(4)))
        maxs.append(float(res.group(5)))
        print('Fit parameter: %s, val=%g, min=%g, max=%g [%s]'\
           %(names[-1], vals[-1], mins[-1], maxs[-1], units[-1]))

      # find fit columns
      res = re.match('^\s*#FIT_COLS\s+([0-9]+):([0-9]+)', l)
      if res:
        cols = (int(res.group(1)), int(res.group(2)))
        print('Fit columns (x,y): ', cols)

      # skip comments and empty lines
      l = re.sub('#.*$', '', l)
      if re.match('^\s+$', l): continue

      # join line to the total command
      cmd = cmd + l

  return {'cmd':cmd, 'names':names, 'units':units,
          'vals':vals, 'mins':mins, 'maxs':maxs, 'cols':cols}


############################################################
# Run cryoblocks calculation using a structure `cb_info` obtained
# by `cryoblocks_read` and new parameter values.
# Load output data (only cols) as numpy array.
def cryoblocks_run(cb_info, values):
  cmd   = cb_info['cmd']
  names = cb_info['names']
  cols  = cb_info['cols']

  # replace parameter definitions
  for n,v in zip(names,values):
    cmd=re.sub('^\s*define\s+%s\s+[\+\-0-9\.eE]*[0-9\.]' %(n),
           'define %s %.16e' %(n,v), cmd, 1, re.MULTILINE)

  # remove all print_to_file statements
  cmd=re.sub('^\s*print_to_file.*$', '', cmd, 0, re.MULTILINE)

  # run cryoblocks program, load output as numpy array
  with subprocess.Popen(['cryoblocks', '-'],
    stdin=subprocess.PIPE, stdout=subprocess.PIPE,
      stderr=subprocess.DEVNULL,
      text=True) as proc:
    proc.stdin.write(cmd)
    proc.stdin.close()
    data = numpy.loadtxt(proc.stdout, comments="#", usecols=cols, unpack=True)

  return data

############################################################


cb_info = cryoblocks_read('calc2')

# read data
data = numpy.loadtxt("data/w2um:f1.dat", comments="#", usecols=(0,1), unpack=True)
t0=1651313572
time=data[0]-t0
temp=data[1]*1e-3

ii=numpy.logical_and(time>0, time<120000)
time=time[ii]
temp=temp[ii]


def minfunc(time, *pars):
  print(">>> ", pars)
  c = cryoblocks_run(cb_info, pars)
  temp = numpy.interp(time, c[0],c[1])
  return temp

res = scipy.optimize.curve_fit(minfunc, time, temp, p0=cb_info['vals'], bounds=(cb_info['mins'],cb_info['maxs']), xtol=1e-8, ftol=1e-8)
cb_info['vals']=res[0]

for n,v,u,m1,m2 in zip(cb_info['names'],cb_info['vals'],cb_info['units'],cb_info['mins'],cb_info['maxs']):
  print('define %s %g%s #FIT %g:%g' %(n,v,u,m1,m2))

plt.plot(time, temp, '*')
tt=numpy.linspace(time[0],time[-1], 1000)
plt.plot(tt, minfunc(tt, *cb_info['vals']), '-')

plt.xlabel("time, h")
plt.ylabel("T, mK, shifted")
plt.grid(which='both')
fig = plt.gcf()
fig.set_size_inches(12, 12)
plt.savefig("fit_res.png", dpi=100)
